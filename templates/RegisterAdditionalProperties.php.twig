<?php
declare(strict_types=1);

namespace {{ namespace }}EventListener;

use Brotkrueml\Schema\Event\RegisterAdditionalTypePropertiesEvent;
use Brotkrueml\Schema\Model\Type;
{% for sectionShortName, types in additionalProperties %}
    {% if sectionShortName != 'core' %}
        {% set section = schema_section(sectionShortName) %}
        use {{ section.phpNamespace }}Model\Type as {{ section.name }}Type;
    {% endif %}
{% endfor %}
use TYPO3\CMS\Core\Utility\ExtensionManagementUtility;

final class RegisterAdditionalProperties
{
    public function __invoke(RegisterAdditionalTypePropertiesEvent $event): void
    {
        {% for sectionShortName, types in additionalProperties %}
            {% set section = schema_section(sectionShortName) %}
            {% if sectionShortName == 'core' %}
                {% for typeLabel, properties in types %}
                    if ($event->getType() === Type\{{ schema_model_class_name(typeLabel) }}::class) {
                        {% for property in properties %}
                            $event->registerAdditionalProperty('{{ property.id.label }}');
                        {% endfor %}
                    }
                {% endfor %}
            {% else %}
                if (ExtensionManagementUtility::isLoaded('schema_{{ sectionShortName }}')) {
                    {% for typeLabel, properties in types %}
                        if ($event->getType() === {{ section.name }}Type\{{ schema_model_class_name(typeLabel) }}::class) {
                            {% for property in properties %}
                                $event->registerAdditionalProperty('{{ property.id.label }}');
                            {% endfor %}
                        }
                    {% endfor %}
                }
            {% endif %}
        {% endfor %}
    }
}
